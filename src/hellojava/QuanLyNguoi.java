
package hellojava;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class QuanLyNguoi extends javax.swing.JFrame {


    private Connection conn;

    public QuanLyNguoi() {
        initComponents();
        connectDatabase();
        loadDataToTable();
    }
    private void connectDatabase() {
        try {
            String url = "jdbc:mysql://localhost:3306/Bank";
            String username = "root";
            String password = "123456";
            conn = DriverManager.getConnection(url, username, password);
            System.out.println("Kết nối thành công!");
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Không thể kết nối đến CSDL!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadDataToTable() {
        DefaultTableModel model = (DefaultTableModel) tblNguoiHien.getModel();
        model.setRowCount(0);

        try {
            String query = "SELECT * FROM NguoiHienMau";
            Statement stmt = conn.createStatement();
            ResultSet rs = stmt.executeQuery(query);

            while (rs.next()) {
                String maNguoi = rs.getString("MaNguoiHien");
                String hoTen = rs.getString("HoTen");
                int tuoi = rs.getInt("Tuoi");
                String nhomMau = rs.getString("NhomMau");
                Date ngayHienGanNhat = rs.getDate("NgayHienGanNhat");

                model.addRow(new Object[]{maNguoi, hoTen, tuoi, nhomMau, ngayHienGanNhat});
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Không thể tải dữ liệu từ CSDL!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblNguoiHien = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        btXoa = new javax.swing.JButton();
        btSua = new javax.swing.JButton();
        btThem = new javax.swing.JButton();
        txtMaNguoi = new javax.swing.JTextField();
        txtHoTen = new javax.swing.JTextField();
        txtNgayGan = new javax.swing.JTextField();
        jspTuoi = new javax.swing.JSpinner();
        cboNhomMau = new javax.swing.JComboBox<>();
        jNext = new javax.swing.JButton();
        jTim = new javax.swing.JButton();

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("quan ly nguoi hien mau");

        jLabel1.setText("MaNguoiHien");

        jLabel2.setText("HoTen");

        jLabel3.setText("NhomMau");

        jLabel4.setText("Tuoi");

        jLabel5.setText("NgayHienGanNhat");

        tblNguoiHien.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "MaNguoiHien", "HoTen", "Tuoi", "NhomMau", "NgayHienGanNhat"
            }
        ));
        tblNguoiHien.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblNguoiHienMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblNguoiHien);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btXoa.setText("xoa");
        btXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btXoaActionPerformed(evt);
            }
        });

        btSua.setText("sua");
        btSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSuaActionPerformed(evt);
            }
        });

        btThem.setText("them");
        btThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btThemActionPerformed(evt);
            }
        });

        txtHoTen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHoTenActionPerformed(evt);
            }
        });

        cboNhomMau.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "AB", "O" }));

        jNext.setText("thoat");
        jNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNextActionPerformed(evt);
            }
        });

        jTim.setText("tim kiem");
        jTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jspTuoi, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtHoTen)
                                    .addComponent(txtMaNguoi)
                                    .addComponent(cboNhomMau, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(txtNgayGan)))
                        .addGap(18, 18, 18)
                        .addComponent(jTim)
                        .addGap(35, 35, 35))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(65, 65, 65)
                        .addComponent(btThem)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btSua)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jNext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(btXoa)
                        .addGap(18, 18, 18)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 539, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtMaNguoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTim))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtHoTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jspTuoi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(32, 32, 32))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(cboNhomMau, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtNgayGan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btXoa)
                                        .addComponent(btThem)
                                        .addComponent(btSua))
                                    .addComponent(jNext, javax.swing.GroupLayout.Alignment.TRAILING)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtHoTenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHoTenActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtHoTenActionPerformed

    private void btThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btThemActionPerformed
        // TODO add your handling code here:
        String maNguoi = txtMaNguoi.getText().trim();
    String hoTen = txtHoTen.getText().trim();
    int tuoi = (int) jspTuoi.getValue();
    String nhomMau = cboNhomMau.getSelectedItem().toString();
    String ngayHienGanNhat = txtNgayGan.getText().trim();

    // Kiểm tra các trường dữ liệu có được điền đầy đủ hay không
    if (maNguoi.isEmpty() || hoTen.isEmpty() || ngayHienGanNhat.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        // Chuẩn bị câu lệnh SQL để thêm dữ liệu
        String query = "INSERT INTO NguoiHienMau (MaNguoiHien, HoTen, Tuoi, NhomMau, NgayHienGanNhat) VALUES (?, ?, ?, ?, ?)";
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setString(1, maNguoi);
        pstmt.setString(2, hoTen);
        pstmt.setInt(3, tuoi);
        pstmt.setString(4, nhomMau);
        pstmt.setString(5, ngayHienGanNhat);

        // Thực thi câu lệnh
        int rowsInserted = pstmt.executeUpdate();
        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(this, "Thêm người hiến máu thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);

            // Cập nhật lại bảng dữ liệu
            loadDataToTable();

            // Xóa dữ liệu trên form nhập liệu sau khi thêm thành công
            txtMaNguoi.setText("");
            txtHoTen.setText("");
            jspTuoi.setValue(18); // Giá trị mặc định
            cboNhomMau.setSelectedIndex(0); // Chọn nhóm máu đầu tiên (A)
            txtNgayGan.setText("");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Không thể thêm người hiến máu!", "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_btThemActionPerformed

    private void tblNguoiHienMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblNguoiHienMouseClicked
        // TODO add your handling code here:
        int selectedRow = tblNguoiHien.getSelectedRow();

    if (selectedRow != -1) { // Kiểm tra xem có hàng nào được chọn không
        // Lấy dữ liệu từ từng cột của hàng được chọn
        String maNguoi = tblNguoiHien.getValueAt(selectedRow, 0).toString();
        String hoTen = tblNguoiHien.getValueAt(selectedRow, 1).toString();
        int tuoi = Integer.parseInt(tblNguoiHien.getValueAt(selectedRow, 2).toString());
        String nhomMau = tblNguoiHien.getValueAt(selectedRow, 3).toString();
        String ngayHienGanNhat = tblNguoiHien.getValueAt(selectedRow, 4).toString();

        // Hiển thị dữ liệu lên các trường nhập liệu
        txtMaNguoi.setText(maNguoi);
        txtHoTen.setText(hoTen);
        jspTuoi.setValue(tuoi);
        cboNhomMau.setSelectedItem(nhomMau);
        txtNgayGan.setText(ngayHienGanNhat);
    }
    }//GEN-LAST:event_tblNguoiHienMouseClicked

    private void btSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSuaActionPerformed
        // TODO add your handling code here:
        String maNguoi = txtMaNguoi.getText().trim();

    if (maNguoi.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn người hiến để sửa!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Xác nhận sửa
    int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn sửa thông tin người hiến " + maNguoi + "?", "Xác nhận sửa", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        // Lấy thông tin từ các ô nhập liệu
        String hoTen = txtHoTen.getText().trim();
        int tuoi = (int) jspTuoi.getValue();
        String nhomMau = cboNhomMau.getSelectedItem().toString();
        String ngayHienGanNhat = txtNgayGan.getText().trim();  // Định dạng ngày: yyyy-mm-dd

        // Kiểm tra xem các trường thông tin đã đầy đủ chưa
        if (hoTen.isEmpty() || ngayHienGanNhat.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng điền đầy đủ thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // Cập nhật thông tin người hiến trong cơ sở dữ liệu
            String updateQuery = "UPDATE NguoiHienMau SET HoTen = ?, Tuoi = ?, NhomMau = ?, NgayHienGanNhat = ? WHERE MaNguoiHien = ?";
            PreparedStatement updateStmt = conn.prepareStatement(updateQuery);
            updateStmt.setString(1, hoTen);
            updateStmt.setInt(2, tuoi);
            updateStmt.setString(3, nhomMau);
            updateStmt.setString(4, ngayHienGanNhat);
            updateStmt.setString(5, maNguoi);

            int rowsUpdated = updateStmt.executeUpdate();
            if (rowsUpdated > 0) {
                // Cập nhật thành công, làm mới bảng hiển thị
                loadDataToTable();
                JOptionPane.showMessageDialog(this, "Cập nhật thông tin người hiến thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Không tìm thấy người hiến với mã này!", "Lỗi", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Lỗi khi cập nhật thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        }
    }
    }//GEN-LAST:event_btSuaActionPerformed

    private void btXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btXoaActionPerformed
        // TODO add your handling code here:
        String maNguoi = txtMaNguoi.getText();

    if (maNguoi.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng chọn một người hiến để xóa!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Xác nhận xóa
    int confirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa người hiến " + maNguoi + "?", "Xác nhận xóa", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        try {
            // Bắt đầu giao dịch
            conn.setAutoCommit(false);
            
            // Xóa dữ liệu từ bảng HienMau trước để không gặp lỗi khóa ngoại
            String deleteHienMauQuery = "DELETE FROM HienMau WHERE MaNguoiHien = ?";
            PreparedStatement deleteHienMauStmt = conn.prepareStatement(deleteHienMauQuery);
            deleteHienMauStmt.setString(1, maNguoi);
            deleteHienMauStmt.executeUpdate();
            
            // Xóa dữ liệu từ bảng NguoiHienMau
            String deleteNguoiHienQuery = "DELETE FROM NguoiHienMau WHERE MaNguoiHien = ?";
            PreparedStatement deleteNguoiHienStmt = conn.prepareStatement(deleteNguoiHienQuery);
            deleteNguoiHienStmt.setString(1, maNguoi);
            deleteNguoiHienStmt.executeUpdate();

            // Cam kết giao dịch
            conn.commit();
            
            // Cập nhật lại bảng dữ liệu
            loadDataToTable();
            
            // Thông báo xóa thành công
            JOptionPane.showMessageDialog(this, "Đã xóa người hiến thành công!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            try {
                // Nếu có lỗi, hủy giao dịch
                conn.rollback();
            } catch (SQLException rollbackException) {
                rollbackException.printStackTrace();
            }
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Không thể xóa người hiến!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } finally {
            try {
                conn.setAutoCommit(true); // Đặt lại chế độ auto-commit
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    }//GEN-LAST:event_btXoaActionPerformed

    private void jTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTimActionPerformed
        // TODO add your handling code here:
        String maNguoiHien = txtMaNguoi.getText().trim(); // Lấy mã người hiến từ ô nhập liệu

    if (maNguoiHien.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Vui lòng nhập Mã Người Hiến để tìm kiếm!", "Thông báo", JOptionPane.WARNING_MESSAGE);
        return;
    }

    DefaultTableModel model = (DefaultTableModel) tblNguoiHien.getModel();
    model.setRowCount(0); // Xóa dữ liệu cũ trên bảng

    try {
        // Câu lệnh SQL tìm kiếm theo Mã Người Hiến
        String query = "SELECT * FROM NguoiHienMau WHERE MaNguoiHien = ?";
        PreparedStatement pstmt = conn.prepareStatement(query);
        pstmt.setString(1, maNguoiHien);
        ResultSet rs = pstmt.executeQuery();

        if (rs.next()) {
            // Lấy thông tin từ ResultSet và hiển thị lên bảng
            String maNguoi = rs.getString("MaNguoiHien");
            String hoTen = rs.getString("HoTen");
            int tuoi = rs.getInt("Tuoi");
            String nhomMau = rs.getString("NhomMau");
            Date ngayHienGanNhat = rs.getDate("NgayHienGanNhat");

            model.addRow(new Object[]{maNguoi, hoTen, tuoi, nhomMau, ngayHienGanNhat});
        } else {
            JOptionPane.showMessageDialog(this, "Không tìm thấy người hiến với mã này!", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Lỗi khi tìm kiếm thông tin!", "Lỗi", JOptionPane.ERROR_MESSAGE);
    }
        
    }//GEN-LAST:event_jTimActionPerformed

    private void jNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNextActionPerformed
        // TODO add your handling code here:
        this.dispose(); // Đóng form hiện tại

        // Tạo và hiển thị lại form trang chủ
        HomeJava home = new HomeJava();
        home.setVisible(true);
    }//GEN-LAST:event_jNextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuanLyNguoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuanLyNguoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuanLyNguoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuanLyNguoi.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuanLyNguoi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btSua;
    private javax.swing.JButton btThem;
    private javax.swing.JButton btXoa;
    private javax.swing.JComboBox<String> cboNhomMau;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JButton jNext;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jTim;
    private javax.swing.JSpinner jspTuoi;
    private javax.swing.JTable tblNguoiHien;
    private javax.swing.JTextField txtHoTen;
    private javax.swing.JTextField txtMaNguoi;
    private javax.swing.JTextField txtNgayGan;
    // End of variables declaration//GEN-END:variables
}
